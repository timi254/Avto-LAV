PImage myImage; //<>//
boolean obrni = true;
int cnt = 0;
float heading;
float posX, posY;
float h;
Vehicle v = new Vehicle(60, 60);
//right
float R = 15; // Referenca - 탑eljena oddaljenost od stene
float e, u, up ,ui, ud, et, es;
float Kp = -0.06;
float Ki = -0.01;
float Kd = -0.04;
float T = 0.02;
float kot = 0;

//front
float R2 = 15; // Referenca - 탑eljena oddaljenost od stene
float e2, u2, up2 ,ui2, ud2, et2, es2;
float Kp2 = -0.06;
float Ki2 = -0.01;
float Kd2 = -0.04;
float T2 = 0.02;
float kot2 = 0;

void setup() {
  size(600, 600);
  myImage = loadImage("labirint.jpg");

  heading = v.getHeading();
  //v.setHeading(90);
  v.printHeading();
}

void draw() {
  background(255);
  image(myImage, 0, 0);

  PVector p = new PVector();
  PVector s = v.distanceV(); // enotin vektor v smeri vo탑nje
  PVector d = v.distanceV();
  d.rotate(PI/2);            // enotin vektor pravokoten na smer vo탑nje

  p = v.position.copy();
  p.add(s);
  int dFront=0;
  while (get((int)p.x, (int)p.y)!=0xff000000) {
    point(p.x, p.y);
    p.add(s);
    //println(d.x+" "+d.y);
    dFront++;
    if (dFront > 400) break;
  }

  p = v.position.copy();
  p.add(d);
  int dRight=0;
  while (get((int)p.x, (int)p.y)!=0xff000000) {
    point(p.x, p.y);
    p.add(d);
    dRight++;
    if (dRight > 400) break;
  }

  e = R - dRight;
  up = Kp*e;
  es = es + e;
  ui = Ki*T*es;
  ud = Kd*(e-et)/T;
  u = up + ui + ud;
  v.setHeading(u);
  et = e;
  
  e2 = R2 - dRight;
  up2 = Kp2*e2;
  es2 = es2 + e2;
  ui2 = Ki2*T2*es2;
  ud2 = Kd2*(e2-et2)/T2;
  u2 = up2 + ui2 + ud2;
  v.setHeading(u2);
  et2 = e2;

  v.update();
  v.display();

  text("up: ", 50, 50);
  text(up, 80, 50);
  text("dFront: ", 50, 60);
  text(dFront, 90, 60);
  text("dRight: ", 50, 70);
  text(dRight, 90, 70);
}
